package yagura.view;

import burp.BurpExtender;
import burp.IBurpExtenderCallbacks;
import burp.IHttpService;
import burp.IMessageEditorController;
import burp.IMessageEditorTab;
import burp.IMessageEditorTabFactory;
import burp.IParameter;
import burp.IRequestInfo;
import extend.util.BurpWrap;
import extend.view.base.HttpRequest;
import extend.view.base.HttpResponse;
import extend.util.HttpUtil;
import extend.util.SwingUtil;
import extend.util.external.TransUtil;
import extend.util.Util;
import java.awt.Component;
import java.awt.Font;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.ParseException;
import java.util.EnumSet;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.JFileChooser;
import javax.swing.text.Document;
import javax.swing.text.EditorKit;
import javax.swing.text.JTextComponent;
import javax.swing.text.StyledEditorKit;
import javax.swing.tree.DefaultTreeModel;
import yagura.model.UniversalViewProperty;

/**
 *
 * @author isayan
 */
public class GeneratePoCTab extends javax.swing.JPanel implements IMessageEditorTabFactory, IMessageEditorTab {

    /**
     * Creates new form GeneraterPoC
     */
    public GeneratePoCTab() {
        initComponents();
        customizeComponents();
    }

    private final EditorKit htmlStyleEditorKit = new StyledEditorKit()
    {
         @Override
         public Document createDefaultDocument()
         {
              return new HTMLSyntaxDocument();
         }
    };    

    private QuickSearchTab quickSearchTab = new QuickSearchTab();

    private void customizeComponents() {
        this.grpGene.add(this.rdoAuto);
        this.grpGene.add(this.rdoTextField);
        this.grpGene.add(this.rdoMultipart);
        this.grpGene.add(this.rdoPlain);
        this.quickSearchTab.setSelectedTextArea(this.txtGeneratorPoC);
        this.quickSearchTab.getEncodingComboBox().addItemListener(encodingItemStateChanged);

        this.txtGeneratorPoC.setEditorKitForContentType("text/html", this.htmlStyleEditorKit);
        this.txtGeneratorPoC.setContentType("text/html");
        
        add(this.quickSearchTab, java.awt.BorderLayout.SOUTH);
    }

    private final java.awt.event.ItemListener encodingItemStateChanged = new java.awt.event.ItemListener() {
        @Override
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            String encoding = quickSearchTab.getSelectedEncoding();
            if (encoding != null) {
                setMessageView(encoding);
            }
        }
    };

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grpGene = new javax.swing.ButtonGroup();
        splitGeneratorPoC = new javax.swing.JSplitPane();
        pnlPoC = new javax.swing.JPanel();
        pnlButton = new javax.swing.JPanel();
        btnSavetoFile = new javax.swing.JButton();
        btnCopyClipbord = new javax.swing.JButton();
        btnGenerate = new javax.swing.JButton();
        pnlCheck = new javax.swing.JPanel();
        chkAutoSubmit = new javax.swing.JCheckBox();
        chkTimeDelay = new javax.swing.JCheckBox();
        chkGETmethod = new javax.swing.JCheckBox();
        chkUseHttps = new javax.swing.JCheckBox();
        chkHtml5 = new javax.swing.JCheckBox();
        chkHtml5Binaly = new javax.swing.JCheckBox();
        spnTime = new javax.swing.JSpinner();
        pnlSelect = new javax.swing.JPanel();
        rdoPlain = new javax.swing.JRadioButton();
        rdoMultipart = new javax.swing.JRadioButton();
        rdoTextField = new javax.swing.JRadioButton();
        rdoAuto = new javax.swing.JRadioButton();
        scrollGeneratorPoC = new javax.swing.JScrollPane();
        txtGeneratorPoC = new javax.swing.JEditorPane();

        setLayout(new java.awt.BorderLayout());

        splitGeneratorPoC.setDividerLocation(140);
        splitGeneratorPoC.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        pnlPoC.setLayout(new java.awt.GridLayout(1, 3));

        btnSavetoFile.setText("Save to file");
        btnSavetoFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSavetoFileActionPerformed(evt);
            }
        });

        btnCopyClipbord.setText("Copy to Clipbord");
        btnCopyClipbord.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCopyClipbordActionPerformed(evt);
            }
        });

        btnGenerate.setText("Generate");
        btnGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlButtonLayout = new javax.swing.GroupLayout(pnlButton);
        pnlButton.setLayout(pnlButtonLayout);
        pnlButtonLayout.setHorizontalGroup(
            pnlButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlButtonLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnGenerate)
                    .addComponent(btnCopyClipbord)
                    .addComponent(btnSavetoFile))
                .addContainerGap(71, Short.MAX_VALUE))
        );
        pnlButtonLayout.setVerticalGroup(
            pnlButtonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlButtonLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnGenerate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCopyClipbord)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSavetoFile)
                .addContainerGap(72, Short.MAX_VALUE))
        );

        pnlPoC.add(pnlButton);

        chkAutoSubmit.setText("auto submit");
        chkAutoSubmit.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chkAutoSubmitStateChanged(evt);
            }
        });

        chkTimeDelay.setText("Time delay (ms)");

        chkGETmethod.setText("GET method");

        chkUseHttps.setText("use https");

        chkHtml5.setText("Html5");
        chkHtml5.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chkHtml5StateChanged(evt);
            }
        });

        chkHtml5Binaly.setSelected(true);
        chkHtml5Binaly.setText("Binaly");
        chkHtml5Binaly.setEnabled(false);

        spnTime.setValue(1000);

        javax.swing.GroupLayout pnlCheckLayout = new javax.swing.GroupLayout(pnlCheck);
        pnlCheck.setLayout(pnlCheckLayout);
        pnlCheckLayout.setHorizontalGroup(
            pnlCheckLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCheckLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCheckLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCheckLayout.createSequentialGroup()
                        .addGroup(pnlCheckLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chkGETmethod)
                            .addComponent(chkAutoSubmit)
                            .addComponent(chkHtml5)
                            .addComponent(chkUseHttps))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(pnlCheckLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(pnlCheckLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chkHtml5Binaly)
                            .addGroup(pnlCheckLayout.createSequentialGroup()
                                .addComponent(chkTimeDelay)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(spnTime, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 20, Short.MAX_VALUE))))
        );
        pnlCheckLayout.setVerticalGroup(
            pnlCheckLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCheckLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chkAutoSubmit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlCheckLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(spnTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkTimeDelay))
                .addGap(2, 2, 2)
                .addComponent(chkGETmethod)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkUseHttps)
                .addGap(2, 2, 2)
                .addComponent(chkHtml5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkHtml5Binaly)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlPoC.add(pnlCheck);

        pnlSelect.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(""), "Content-Type"));

        rdoPlain.setText("plain");

        rdoMultipart.setText("multi part");

        rdoTextField.setText("text field");

        rdoAuto.setSelected(true);
        rdoAuto.setText("auto");

        javax.swing.GroupLayout pnlSelectLayout = new javax.swing.GroupLayout(pnlSelect);
        pnlSelect.setLayout(pnlSelectLayout);
        pnlSelectLayout.setHorizontalGroup(
            pnlSelectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSelectLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlSelectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rdoTextField)
                    .addComponent(rdoAuto)
                    .addComponent(rdoMultipart)
                    .addComponent(rdoPlain))
                .addContainerGap(138, Short.MAX_VALUE))
        );
        pnlSelectLayout.setVerticalGroup(
            pnlSelectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSelectLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rdoAuto)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdoTextField)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdoMultipart)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdoPlain)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlPoC.add(pnlSelect);

        splitGeneratorPoC.setLeftComponent(pnlPoC);

        txtGeneratorPoC.setEditable(false);
        scrollGeneratorPoC.setViewportView(txtGeneratorPoC);

        splitGeneratorPoC.setBottomComponent(scrollGeneratorPoC);

        add(splitGeneratorPoC, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    protected final java.util.ResourceBundle BUNDLE = java.util.ResourceBundle.getBundle("yagura/resources/Resource");

    private void btnSavetoFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSavetoFileActionPerformed
        JTextComponent ta = this.txtGeneratorPoC;
        String encoding = this.quickSearchTab.getSelectedEncoding();
        JFileChooser filechooser = new JFileChooser();
        filechooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int selected = filechooser.showSaveDialog(null);
        if (selected == JFileChooser.APPROVE_OPTION) {
            FileOutputStream fstm = null;
            try {
                File file = filechooser.getSelectedFile();
                if (SwingUtil.isFileOverwriteConfirmed(file, String.format(BUNDLE.getString("extend.exists.overwrite.message"), file.getName()), BUNDLE.getString("extend.exists.overwrite.confirm"))) {
                    fstm = new FileOutputStream(file);
                    fstm.write(Util.encodeMessage(ta.getText(), encoding));
                    fstm.flush();
                }
            } catch (Exception ex) {
                Logger.getLogger(GeneratePoCTab.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                if (fstm != null) {
                    try {
                        fstm.close();
                    } catch (IOException ex) {
                        Logger.getLogger(GeneratePoCTab.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }
    }//GEN-LAST:event_btnSavetoFileActionPerformed

    private void btnCopyClipbordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCopyClipbordActionPerformed
        JTextComponent ta = this.txtGeneratorPoC;
        SwingUtil.systemClipboardCopy(ta.getText());
    }//GEN-LAST:event_btnCopyClipbordActionPerformed

    private void btnGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateActionPerformed
        JTextComponent ta = this.txtGeneratorPoC;
        if (this.chkHtml5.isSelected()) {
            ta.setText(this.generateHTML5PoC());
        } else {
            ta.setText(this.generatePoC());
        }
    }//GEN-LAST:event_btnGenerateActionPerformed

    private void chkHtml5StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_chkHtml5StateChanged
//        this.chkHtml5Binaly.setEnabled(this.chkHtml5.isSelected());
    }//GEN-LAST:event_chkHtml5StateChanged

    private void chkAutoSubmitStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_chkAutoSubmitStateChanged
        this.chkTimeDelay.setEnabled(this.chkAutoSubmit.isSelected());
    }//GEN-LAST:event_chkAutoSubmitStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCopyClipbord;
    private javax.swing.JButton btnGenerate;
    private javax.swing.JButton btnSavetoFile;
    private javax.swing.JCheckBox chkAutoSubmit;
    private javax.swing.JCheckBox chkGETmethod;
    private javax.swing.JCheckBox chkHtml5;
    private javax.swing.JCheckBox chkHtml5Binaly;
    private javax.swing.JCheckBox chkTimeDelay;
    private javax.swing.JCheckBox chkUseHttps;
    private javax.swing.ButtonGroup grpGene;
    private javax.swing.JPanel pnlButton;
    private javax.swing.JPanel pnlCheck;
    private javax.swing.JPanel pnlPoC;
    private javax.swing.JPanel pnlSelect;
    private javax.swing.JRadioButton rdoAuto;
    private javax.swing.JRadioButton rdoMultipart;
    private javax.swing.JRadioButton rdoPlain;
    private javax.swing.JRadioButton rdoTextField;
    private javax.swing.JScrollPane scrollGeneratorPoC;
    private javax.swing.JSplitPane splitGeneratorPoC;
    private javax.swing.JSpinner spnTime;
    private javax.swing.JEditorPane txtGeneratorPoC;
    // End of variables declaration//GEN-END:variables

    public void setMessageFont(Font font) {
        this.txtGeneratorPoC.setFont(font);
        this.quickSearchTab.setMessageFont(font);        
    }

    private HttpRequest message = null;

    public void setMessageView(String encoding) {
        try {
            if (this.message == null) {
                return;
            }
            BurpExtender burp = BurpExtender.getInstance();
            JTextComponent ta = this.txtGeneratorPoC;
            if (this.message != null) {
                // Raw
                ta.setText("");
                ta.setCaretPosition(0);
                // View                
            } else {
                ta.setText("");
                ta.setCaretPosition(0);
            }
            this.quickSearchTab.clearView();
        } catch (Exception ex) {
            Logger.getLogger(GeneratePoCTab.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private IMessageEditorController controller = null;

    @Override
    public IMessageEditorTab createNewInstance(IMessageEditorController controller, boolean editable) {
        this.controller = controller;
        return this;
    }

    @Override
    public String getTabCaption() {
        return "Generate PoC";
    }

    @Override
    public Component getUiComponent() {
        return this;
    }

    @Override
    public boolean isEnabled(byte[] content, boolean isMessageRequest) {
        if (isMessageRequest) {
            if (content == null || content.length == 0) {
                return false;
            }
            EnumSet<UniversalViewProperty.UniversalView> view = BurpExtender.getInstance().getProperty().getEncodingProperty().getMessageView();
            if (!view.contains(UniversalViewProperty.UniversalView.GENERATE_POC)) {
                return false;
            }        
            try {
                HttpRequest request = HttpRequest.parseHttpRequest(content);
                String host = request.getHost();
                if (host == null) {
                    return false;
                }
                if (!("POST".equals(request.getMethod()) || "GET".equals(request.getMethod()))) {
                    return false;
                }
                return (request.getBody().length() > 0);
            } catch (ParseException ex) {
                return false;
            }
        }
        return false;
    }

    @Override
    public void setMessage(byte[] content, boolean isMessageRequest) {
        try {
            BurpExtender extenderImpl = BurpExtender.getInstance();
            String guessCharset = null;
            HttpRequest request = null;
            if (this.controller.getResponse() != null) {
                HttpResponse response = HttpResponse.parseHttpResponse(this.controller.getResponse());
                guessCharset = response.getGuessCharset();
            }
            if (isMessageRequest) {
                if (this.controller != null) {
                    request = HttpRequest.parseHttpRequest(content, HttpUtil.isSSL(this.controller.getHttpService().getProtocol()));                
                }
                else {
                    request = HttpRequest.parseHttpRequest(content);                                
                }
                if (guessCharset == null) {
                    guessCharset = request.getGuessCharset();
                }
                this.message = request;
            }
            if (this.controller != null) {
                this.chkUseHttps.setSelected(HttpUtil.isSSL(this.controller.getHttpService().getProtocol()));
            } else if (request != null) {
                this.chkUseHttps.setSelected(request.isSSL());
            } else {
                this.chkUseHttps.setSelected(false);
            }
            this.quickSearchTab.getEncodingComboBox().removeItemListener(encodingItemStateChanged);
            this.quickSearchTab.renewEncodingList(guessCharset, extenderImpl.getSelectEncodingList());
            encodingItemStateChanged.itemStateChanged(null);
            this.quickSearchTab.getEncodingComboBox().addItemListener(encodingItemStateChanged);
        } catch (ParseException ex) {
            Logger.getLogger(GeneratePoCTab.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Override
    public byte[] getMessage() {
        if (this.message != null) {
            return this.message.getMessageBytes();
        } else {
            return new byte[]{};
        }
    }

    @Override
    public boolean isModified() {
        return false;
    }

    @Override
    public byte[] getSelectedData() {
        return null;
    }

    public String getSelectedText() {
        String selectText = this.txtGeneratorPoC.getSelectedText();
        return selectText;
    }

    private final static Pattern ENCODE_JS = Pattern.compile("[^ !#-&(-/0-Z\\[\\]^-~]");
    
    private String generatePoC() {
        StringBuilder buff = new StringBuilder();
        try {
            boolean csrfAutoSubmit = this.chkAutoSubmit.isSelected();
            int timeOutValue = (int) this.spnTime.getValue();
            boolean csrfMultiPart = this.rdoMultipart.isSelected();
            boolean csrfTextPlain = this.rdoPlain.isSelected();
            String csrfEncoding = this.quickSearchTab.getSelectedEncoding();
            IBurpExtenderCallbacks callback = BurpExtender.getCallbacks();
            final HttpRequest reqmsg = this.message;
            // 自動判定
            String contentType = reqmsg.getEnctype();
            String csrfEnctype = (contentType == null) ? "application/x-www-form-urlencoded" : contentType;
            // select auto
            if (this.rdoAuto.isSelected()) {
                if (contentType != null) {
                    csrfEnctype = contentType;
                    if (HttpUtil.isMaltiPart(contentType)) {
                        csrfMultiPart = true;
                    } else if (HttpUtil.isPlain(contentType)) {
                        csrfTextPlain = true;
                        csrfEnctype = "text/plain"; // 固定 
                    }
                }
                Logger.getLogger(GeneratePoCTab.class.getName()).log(Level.FINE, "multipart:{0}", csrfMultiPart);
            }
            else {
                // select multipart
                if (csrfMultiPart && !HttpUtil.isMaltiPart(contentType)) {
                    csrfEnctype = "multipart/form-data";
                }
                // select text/plain
                if (csrfTextPlain) {
                    csrfEnctype = "text/plain"; // 固定
                }                
            }
            String csrfFormMethod = this.chkGETmethod.isSelected() ? "GET" : reqmsg.getMethod();
            String csrfFormTarget = this.chkTimeDelay.isSelected() ? " target=\"_blank\"" : "";
            
            IHttpService httpService = BurpWrap.getHttpService(reqmsg.getHost(), reqmsg.getPort(), chkUseHttps.isSelected());
            String csrfUrl = reqmsg.getUrl(httpService);
            IRequestInfo requestInfo = callback.getHelpers().analyzeRequest(reqmsg.getMessageBytes());
            buff.append("<html>");
            buff.append(String.format("<head><meta http-equiv=\"content-type\" content=\"text/html; charset='%s'\"></head>\n", 
                new Object[]{csrfEncoding}));
            String autoSubmit = "";
            if (csrfAutoSubmit) { 
                autoSubmit = " onload=\"document.forms[0].submit();\"";
                if (this.chkTimeDelay.isSelected()) {
                    autoSubmit = String.format(" onload=\"setTimeout({document.forms[0].submit();}, %d);\"", 
                        new Object[]{ timeOutValue });
                }
            }
            buff.append(String.format("<body%s>\n", new Object[]{autoSubmit}));
            // csrf urlencoded/multipart
            if (!csrfTextPlain) {
                if (HttpUtil.isUrlEencoded(csrfEnctype)) {
                    buff.append(String.format("<form action=\"%s\" method=\"%s\"%s>\n", 
                        new Object[]{csrfUrl, csrfFormMethod, csrfFormTarget}));
                }
                else {
                    buff.append(String.format("<form action=\"%s\" method=\"%s\" enctype=\"%s\"%s>\n", 
                        new Object[]{csrfUrl, csrfFormMethod, csrfEnctype, csrfFormTarget}));
                }
                List<IParameter> parameters = requestInfo.getParameters();
                Logger.getLogger(GeneratePoCTab.class.getName()).log(Level.FINE, "parameters.length:{0}", parameters.size());
                boolean binaryParam = false;
                String filename = "";
                for (int i = 0; i < parameters.size(); i++) {
                    IParameter param = parameters.get(i);
                    String paramName = param.getName();
                    String paramValue = param.getValue();
                    byte paramType = param.getType();
                    if (paramType == IParameter.PARAM_URL || paramType == IParameter.PARAM_COOKIE) {
                        continue;
                    }
                    //if Resuest MultiPart binaryParam;
                    if (paramType == IParameter.PARAM_BODY && !binaryParam) {
                        if (HttpUtil.isUrlEencoded(contentType)) {
                            paramName = TransUtil.decodeUrl(paramName, csrfEncoding);
                            paramValue = TransUtil.decodeUrl(paramValue, csrfEncoding);
                        }
                        else if (HttpUtil.isMaltiPart(contentType)) {
                            paramName = Util.decodeMessage(Util.encodeMessage(paramName), csrfEncoding);
                            paramValue = Util.decodeMessage(Util.encodeMessage(paramValue), csrfEncoding);
                        }
                        String decodename = TransUtil.toHtmlEncode(paramName);
                        String decodevalue = TransUtil.toHtmlEncode(paramValue);
                        buff.append(String.format("<input type=\"hidden\" name=\"%s\" value=\"%s\">\n", 
                                new Object[]{decodename, decodevalue}));
                    } else if (paramType == IParameter.PARAM_MULTIPART_ATTR) {
                        binaryParam = true;
                        filename = paramValue;
                    } else {
                        String file_encoding = csrfEncoding;
                        String decodevalue = Util.decodeMessage(Util.encodeMessage(paramValue), file_encoding);
                        buff.append(String.format("<textarea name=\"%s&quot;; filename=&quot;%s&quot;&#x0d;&#x0a;Content-Type: text/plain; charset=%s\">", 
                                new Object[]{paramName, filename, file_encoding}));
                        buff.append(TransUtil.toHtmlEncode(decodevalue));
                        buff.append("</textarea>");
                        binaryParam = false;
                    }
                }
            // csrf textplain    
            } else {
                buff.append(String.format("<form action=\"%s\" method=\"%s\" enctype=\"%s\"%s>\n", 
                    new Object[]{csrfUrl, csrfFormMethod, csrfEnctype, csrfFormTarget}));
                Map.Entry<String, String> pair = HttpUtil.getParameter(Util.decodeMessage(Util.encodeMessage(reqmsg.getBody()), csrfEncoding));
                String key = pair.getKey();
                String val = pair.getValue();
                if ("".equals(val)) {                
                    String sp [] = key.split("=", 2);
                    if (sp.length == 1) {
                        buff.append(String.format("<textarea name=\"%s\">%s</textarea>",                            
                            new Object[]{TransUtil.toHtmlEncode(sp[0]), ""}));                                        
                    }
                    else {
                        buff.append(String.format("<textarea name=\"%s\">%s</textarea>",                            
                            new Object[]{TransUtil.toHtmlEncode(sp[0]), TransUtil.toHtmlEncode(sp[1])}));                    
                    }
                }
                else {                
                    buff.append(String.format("<textarea name=\"%s\">%s</textarea>", 
                        new Object[]{TransUtil.toHtmlEncode(key), TransUtil.toHtmlEncode(val)}));                
                }
            }
            if (!csrfAutoSubmit) {
                buff.append(String.format("<input type=\"submit\" value=\"submit\">\n"));
            }
            buff.append("</form>");
            buff.append("</body></html>\n");
        } catch (Exception ex) {
            Logger.getLogger(GeneratePoCTab.class.getName()).log(Level.SEVERE, null, ex);
        }
        return buff.toString();
    }
    
    private String generateHTML5PoC() {
        StringBuilder buff = new StringBuilder();
        try {
            boolean csrfAutoSubmit = this.chkAutoSubmit.isSelected();
            int timeOutValue = (int) this.spnTime.getValue();
            boolean csrfMultiPart = this.rdoMultipart.isSelected();
            boolean csrfTextPlain = this.rdoPlain.isSelected();
            boolean csrfHtml5Binaly = this.chkHtml5Binaly.isSelected();
            String csrfEncoding = this.quickSearchTab.getSelectedEncoding();            
            IBurpExtenderCallbacks callback = BurpExtender.getCallbacks();
            final HttpRequest reqmsg = this.message;
            String contentType = reqmsg.getEnctype();
            String csrfEnctype = (contentType == null) ? "application/x-www-form-urlencoded" : contentType;
            // 自動判定
            if (this.rdoAuto.isSelected()) {
                if (contentType != null) {
                    csrfEnctype = contentType;
                    if (HttpUtil.isMaltiPart(contentType)) {
                        csrfMultiPart = true;
                    } else if (HttpUtil.isPlain(contentType)) {
                        csrfTextPlain = true;
                    }
                }
                Logger.getLogger(GeneratePoCTab.class.getName()).log(Level.FINE, "multipart:{0}", csrfMultiPart);
            }
            else {
                if (csrfMultiPart && !HttpUtil.isMaltiPart(contentType)) {
                    csrfEnctype = "multipart/form-data";
                }
                if (csrfTextPlain && !HttpUtil.isPlain(contentType)) {
                    csrfEnctype = "text/plain";
                }                
            }
            String csrfFormMethod = this.chkGETmethod.isSelected() ? "GET" : reqmsg.getMethod();
            String csrfFormTarget = this.chkTimeDelay.isSelected() ? " target=\"_blank\"" : "";

//            IHttpService httpService = this.controller.getHttpService();
            IHttpService httpService = BurpWrap.getHttpService(reqmsg.getHost(), reqmsg.getPort(), chkUseHttps.isSelected());
            String csrfUrl = reqmsg.getUrl(httpService);
            IRequestInfo requestInfo = callback.getHelpers().analyzeRequest(reqmsg.getMessageBytes());
            buff.append("<html>");
            buff.append(String.format("<head><meta http-equiv=\"content-type\" content=\"text/html; charset='%s'\">\n", new Object[]{csrfEncoding}));
            buff.append("<script type=\"text/javascript\">\n");
            buff.append("function html5_csrf() {\n");
            String boundary = HttpUtil.generateBoundary();
            buff.append("\tvar xhr = new XMLHttpRequest();\r\n");
            buff.append(String.format("\txhr.open('%s', '%s', true);\r\n", new Object[]{csrfFormMethod, TransUtil.encodeJsLangQuote(csrfUrl)}));
            buff.append("\txhr.withCredentials = true;\r\n");       // Cookieを付与
            buff.append("\tvar req = '';\r\n");
            // csrf urlencoded/multipart
            if (!csrfTextPlain) {
                if (csrfMultiPart) {
                    buff.append(String.format("\tvar boundary = '--%s';\r\n", new Object[]{boundary}));
                    buff.append("\txhr.setRequestHeader('Content-Type', 'multipart/form-data; boundary=' + boundary);\r\n");
                    List<IParameter> parameters = requestInfo.getParameters();
                    Logger.getLogger(GeneratePoCTab.class.getName()).log(Level.FINE, "parameters.length:{0}", parameters.size());
                    boolean binaryParam = false;
                    String filename = "";
                    StringBuilder parambuff = new StringBuilder();        
                    for (int i = 0; i < parameters.size(); i++) {
                        IParameter param = parameters.get(i);
                        String paramName = param.getName();
                        String paramValue = param.getValue();
                        byte paramType = param.getType();
                        if (HttpUtil.isUrlEencoded(contentType)) {
                            paramName = TransUtil.decodeUrl(paramName, csrfEncoding);
                            paramValue = TransUtil.decodeUrl(paramValue, csrfEncoding);
                        }
                        if (paramType == IParameter.PARAM_URL || paramType == IParameter.PARAM_COOKIE) {
                            continue;
                        }
                        if (paramType == IParameter.PARAM_BODY && !binaryParam) {
                            if (parambuff.length() > 0) {
                                parambuff.append(";\r\n");
                            }
                            parambuff.append("\treq += '--' + boundary + '\\r\\n' + \r\n");
                            parambuff.append(String.format("\t'Content-Disposition: form-data; name=\"%s\"\\r\\n\\r\\n' + \r\n", new Object[]{paramName}));
                            String encodeHex = TransUtil.toByteHexEncode(Util.encodeMessage(paramValue), TransUtil.PTN_ENCODE_ALPHANUM, false);
                            parambuff.append(String.format("\t'%s\\r\\n'", new Object[]{encodeHex}));
                        } else if (paramType == IParameter.PARAM_MULTIPART_ATTR) {
                            binaryParam = true;
                            filename = paramValue;
                        } else {
                            if (parambuff.length() > 0) {
                                parambuff.append(";\r\n");
                            }
                            parambuff.append("\treq += '--' + boundary + '\\r\\n' + \r\n");
                            parambuff.append(String.format("\t'Content-Disposition: form-data; name=\"%s\"; filename=\"%s\"\\r\\n' + \r\n", new Object[]{paramName, filename}));
                            parambuff.append("\t'Content-Type: application/octet-stream\\r\\n\\r\\n'");
                            parambuff.append("+ \r\n");
                            String encodeHex = TransUtil.toByteHexEncode(Util.encodeMessage(paramValue), TransUtil.PTN_ENCODE_ALPHANUM, false);
                            parambuff.append(String.format("\t'%s\\r\\n'", new Object[]{encodeHex}));
                            binaryParam = false;
                            filename = "";
                        }
                    }
                    parambuff.append(" + '--' + boundary + '--\\r\\n';\r\n");
                    buff.append(parambuff.toString());
                    buff.append("\tvar blob = new Uint8Array(req.length);\r\n");
                    buff.append("\tfor (var i = 0; i < blob.length; i++)\r\n");
                    buff.append("\t\tblob[i] = req.charCodeAt(i);\r\n"); 
                    buff.append("\txhr.send(new Blob([blob]));\r\n");
                } else {
                    buff.append("\txhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\r\n");
                    List<IParameter> parameters = requestInfo.getParameters();                
                    Logger.getLogger(GeneratePoCTab.class.getName()).log(Level.FINE, "parameters.size:{0}", parameters.size());
                    boolean binaryParam = false;
                    boolean first = true;
                    for (int i = 0; i < parameters.size(); i++) {
                        IParameter param = parameters.get(i);
                        String paramName = param.getName();
                        String paramValue = param.getValue();
                        byte paramType = param.getType();
                        if (paramType == IParameter.PARAM_URL || paramType == IParameter.PARAM_COOKIE) {
                            continue;
                        }
                        if (paramType == IParameter.PARAM_BODY && !binaryParam) {
                            buff.append("\treq += ");
                            if (!first) {
                                buff.append(" + '&'");
                            }
                            buff.append(String.format("'%s' + '=' + '%s';\r\n", 
                                    new Object[]{TransUtil.encodeJsLangQuote(paramName), 
                                                 TransUtil.encodeJsLangQuote(paramValue)}));
                            first = false;
                        } else if (paramType == IParameter.PARAM_MULTIPART_ATTR) {
                            binaryParam = true;
                        }
                    }
                    buff.append("\tvar blob = new Uint8Array(req.length);\r\n");
                    buff.append("\tfor (var i = 0; i < blob.length; i++)\r\n");
                    buff.append("\t\tblob[i] = req.charCodeAt(i);\r\n"); 
                    buff.append("\txhr.send(new Blob([blob]));\r\n");
                }
            } // csrf textplain    
            else {
                buff.append(String.format("\txhr.setRequestHeader('Content-Type', '%s');\r\n", csrfEnctype));
                String paramValue = Util.decodeMessage(reqmsg.getBodyBytes());
                buff.append(String.format("\treq += '%s';\r\n", new Object[]{TransUtil.toByteHexEncode(Util.getRawByte(paramValue), ENCODE_JS, false)}));
                buff.append("\tvar blob = new Uint8Array(req.length);\r\n");
                buff.append("\tfor (var i = 0; i < blob.length; i++)\r\n");
                buff.append("\t\tblob[i] = req.charCodeAt(i);\r\n"); 
                buff.append("\txhr.send(new Blob([blob]));\r\n");
            }
            buff.append("}\n");
            buff.append("</script></head>\n");
            String autoSubmit = "";
            if (csrfAutoSubmit) { 
                autoSubmit= " onload=\"html5_csrf()\"";
                if (this.chkTimeDelay.isSelected()) {
                    autoSubmit = String.format(" onload=\"setTimeout({html5_csrf();}, %d);\"", new Object[]{ timeOutValue });
                }
            }
            buff.append(String.format("<body%s>\n", new Object[]{ autoSubmit }));
            if (!csrfAutoSubmit) {
                buff.append(String.format("<input type=\"button\" value=\"Submit\" onClick=\"html5_csrf()\">\n"));
            }
            buff.append("</body></html>\n");
        } catch (Exception ex) {
            Logger.getLogger(GeneratePoCTab.class.getName()).log(Level.SEVERE, null, ex);
        }
        return buff.toString();
    }


    public void clearView() {
        this.quickSearchTab.clearView();
    }

}
