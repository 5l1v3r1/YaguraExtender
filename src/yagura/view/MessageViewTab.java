/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * HTMLCommentTab.java
 *
 * Created on 2011/12/17, 14:05:55
 */
package yagura.view;

import burp.IHttpRequestResponse;
import burp.BurpExtender;
import burp.IMessageEditorTab;
import yagura.model.*;
import java.awt.Font;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author isayan
 */
public class MessageViewTab extends javax.swing.JPanel implements SendToMessage {

    /**
     * Creates new form HTMLCommentTab
     */
    public MessageViewTab() {
        initComponents();
        customizeComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popQuick = new javax.swing.JPopupMenu();
        mnuRegex = new javax.swing.JCheckBoxMenuItem();
        mnuIgnoreCase = new javax.swing.JCheckBoxMenuItem();
        grpGene = new javax.swing.ButtonGroup();
        popBurpMenu = new javax.swing.JPopupMenu();
        tabbetMessageView = new javax.swing.JTabbedPane();

        mnuRegex.setSelected(true);
        mnuRegex.setText("regex");
        popQuick.add(mnuRegex);

        mnuIgnoreCase.setText("case sensitive");
        popQuick.add(mnuIgnoreCase);

        setLayout(new java.awt.BorderLayout());

        tabbetMessageView.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabbetMessageViewStateChanged(evt);
            }
        });
        add(tabbetMessageView, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private final RawViewTab tabRequestRawView = new RawViewTab(true);
    private final RawViewTab tabResponseRawView = new RawViewTab(false);
    private final HtmlCommetViewTab tabHtmlComment = new HtmlCommetViewTab();
    private final JSONViewTab tabRequestJSONViewTab = new JSONViewTab(true);
    private final JSONViewTab tabResponseJSONViewTab = new JSONViewTab(false);
    private final GeneratePoCTab tabGeneratePoC = new GeneratePoCTab();
    private final List<IMessageEditorTab> listTabs = new ArrayList<IMessageEditorTab>();

    @SuppressWarnings("unchecked")
    private void customizeComponents() {
        this.listTabs.add(this.tabRequestRawView);
        this.listTabs.add(this.tabResponseRawView);
        this.listTabs.add(this.tabRequestJSONViewTab);
        this.listTabs.add(this.tabResponseJSONViewTab);
        this.listTabs.add(this.tabHtmlComment);
        this.listTabs.add(this.tabGeneratePoC);
    }

    private void tabbetMessageViewStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabbetMessageViewStateChanged
    }//GEN-LAST:event_tabbetMessageViewStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup grpGene;
    private javax.swing.JCheckBoxMenuItem mnuIgnoreCase;
    private javax.swing.JCheckBoxMenuItem mnuRegex;
    private javax.swing.JPopupMenu popBurpMenu;
    private javax.swing.JPopupMenu popQuick;
    private javax.swing.JTabbedPane tabbetMessageView;
    // End of variables declaration//GEN-END:variables

    public void showBurpMenu(java.awt.event.MouseEvent evt) {
        if (evt.getButton() == java.awt.event.MouseEvent.BUTTON3) {
            SendToMenu popMenu = BurpExtender.getInstance().getSendToMenu();
            popMenu.showBurpMenu(this, evt);
        }
    }

    public void setMessageFont(Font font) {
        this.tabRequestRawView.setFont(font);
        this.tabResponseRawView.setFont(font);
        this.tabHtmlComment.setFont(font);
        this.tabRequestJSONViewTab.setFont(font);
        this.tabResponseJSONViewTab.setFont(font);
        this.tabGeneratePoC.setFont(font);
    }

    private HttpMessageItem messageItem = null;

    /**
     * @return the messageInfo
     */
    public HttpMessageItem getMessageInfo() {
        return this.messageItem;
    }

    /**
     * @param messageInfo the messageItem to set
     */
    @SuppressWarnings("unchecked")
    public void setMessageInfo(IHttpRequestResponse messageInfo) {
        try {
            this.messageItem = new HttpMessageItem(messageInfo);
            this.tabbetMessageView.removeAll();
            for (int i = 0; i < this.listTabs.size(); i++) {
                boolean visible = false;
                IMessageEditorTab tab = this.listTabs.get(i);
                if (tab.isEnabled(messageItem.getRequest(), true)) {
                    tab.setMessage(messageItem.getRequest(), true);
                    visible = true;
                }
                if (tab.isEnabled(messageItem.getResponse(), false)) {
                    tab.setMessage(messageItem.getResponse(), false);
                    visible = true;
                }
                if (visible) {
                    this.tabbetMessageView.addTab(tab.getTabCaption(), tab.getUiComponent());
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(MessageViewTab.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void setMessageView(String encoding) {
        try {
            if (this.messageItem == null) {
                return;
            }
            if (messageItem.getRequest() != null) {
                if (this.tabbetMessageView.getSelectedIndex() == this.tabbetMessageView.indexOfTab(tabRequestRawView.getTabCaption())) {
                    this.tabRequestRawView.setMessageView(encoding);
                    this.tabRequestRawView.clearView();
                } else if (this.tabbetMessageView.getSelectedIndex() == this.tabbetMessageView.indexOfTab(tabResponseRawView.getTabCaption())) {
                    this.tabResponseRawView.setMessageView(encoding);
                    this.tabResponseRawView.clearView();
                } else if (this.tabbetMessageView.getSelectedIndex() == this.tabbetMessageView.indexOfTab("JSON")) {
                    this.tabRequestJSONViewTab.setMessageView(encoding);
                    this.tabRequestJSONViewTab.clearView();
                    this.tabResponseJSONViewTab.setMessageView(encoding);
                    this.tabResponseJSONViewTab.clearView();
                } else if (this.tabbetMessageView.getSelectedIndex() == this.tabbetMessageView.indexOfTab(tabHtmlComment.getTabCaption())) {
                    this.tabHtmlComment.setMessageView(encoding);
                    this.tabHtmlComment.clearView();
                } else if (this.tabbetMessageView.getSelectedIndex() == this.tabbetMessageView.indexOfTab(tabGeneratePoC.getTabCaption())) {
                    this.tabGeneratePoC.setMessageView(encoding);
                    this.tabGeneratePoC.clearView();
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(MessageViewTab.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void clearView() {
        this.tabRequestRawView.clearView();
        this.tabResponseRawView.clearView();
        this.tabRequestJSONViewTab.clearView();
        this.tabResponseJSONViewTab.clearView();
        this.tabHtmlComment.clearView();
        this.tabGeneratePoC.clearView();;
    }

    @Override
    public IHttpRequestResponse[] getSelectedMessages() {
        return new IHttpRequestResponse[]{this.messageItem};
    }

    @Override
    public String getSelectedText() {
        String text = "";
        if (this.tabbetMessageView.getSelectedIndex() == this.tabbetMessageView.indexOfTab(tabRequestRawView.getTabCaption())) {
            text = this.tabRequestRawView.getSelectedText();
        } else if (this.tabbetMessageView.getSelectedIndex() == this.tabbetMessageView.indexOfTab(tabResponseRawView.getTabCaption())) {
            text = this.tabResponseRawView.getSelectedText();
        } else if (this.tabbetMessageView.getSelectedIndex() == this.tabbetMessageView.indexOfTab("JSON")) {
            if (this.tabbetMessageView.getSelectedComponent() == this.tabResponseRawView) {
                text = this.tabResponseRawView.getSelectedText();
            }
            else if (this.tabbetMessageView.getSelectedComponent() == this.tabResponseJSONViewTab) {
                text = this.tabResponseJSONViewTab.getSelectedText();
            }
        } else if (this.tabbetMessageView.getSelectedIndex() == this.tabbetMessageView.indexOfTab(tabHtmlComment.getTabCaption())) {
            text = this.tabHtmlComment.getSelectedText();
        } else if (this.tabbetMessageView.getSelectedIndex() == this.tabbetMessageView.indexOfTab(tabGeneratePoC.getTabCaption())) {
            text = this.tabGeneratePoC.getSelectedText();
        }
        return text;
    }

    @Override
    public boolean isExtendVisible() {
        return false;
    }
}
