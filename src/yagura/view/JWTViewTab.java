package yagura.view;

import burp.BurpExtender;
import burp.IMessageEditorController;
import burp.IMessageEditorTab;
import burp.IMessageEditorTabFactory;
import burp.IRequestInfo;
import extend.view.base.HttpMessage;
import extend.view.base.HttpRequest;
import java.awt.Component;
import java.awt.Font;
import java.text.ParseException;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.text.Document;
import javax.swing.text.EditorKit;
import javax.swing.text.StyledEditorKit;
import yagura.model.JWTObject;
import yagura.model.JWTToken;
import yagura.model.UniversalViewProperty;

/**
 *
 * @author isayan
 */
public class JWTViewTab extends javax.swing.JPanel implements IMessageEditorTabFactory, IMessageEditorTab  {
    
    private final EditorKit jsonStyleEditorKit = new StyledEditorKit()
    {
         public Document createDefaultDocument()
         {
              return new JSONSyntaxDocument();
         }
    };    
    
    /**
     * Creates new form JWTView
     */
    public JWTViewTab() {
        this(null, false);
    }

    /**
     * Creates new form JWTView
     */
    public JWTViewTab(IMessageEditorController controller, boolean editable) {
        initComponents();
        customizeComponents();
    }

    @SuppressWarnings("unchecked")
    private void customizeComponents() {

        this.txtHeaderJSON.setEditable(false);
        this.txtHeaderJSON.setEditorKitForContentType("text/json", this.jsonStyleEditorKit);
        this.txtHeaderJSON.setContentType("text/json");

        this.txtPayloadJSON.setEditable(false);
        this.txtPayloadJSON.setEditorKitForContentType("text/json", this.jsonStyleEditorKit);
        this.txtPayloadJSON.setContentType("text/json");
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cmbParam = new javax.swing.JComboBox<>();
        pnlJWT = new javax.swing.JPanel();
        pnlHeader = new javax.swing.JPanel();
        lblHeader = new javax.swing.JLabel();
        scrollHeaderJSON = new javax.swing.JScrollPane();
        txtHeaderJSON = new javax.swing.JEditorPane();
        pnlPayload = new javax.swing.JPanel();
        lblPayload = new javax.swing.JLabel();
        scrollPayloadJSON = new javax.swing.JScrollPane();
        txtPayloadJSON = new javax.swing.JEditorPane();
        Signature = new javax.swing.JPanel();
        lblSignature = new javax.swing.JLabel();
        scrollSignatureJSON = new javax.swing.JScrollPane();
        txtSignatureSign = new javax.swing.JEditorPane();

        setLayout(new java.awt.BorderLayout());

        cmbParam.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbParamItemStateChanged(evt);
            }
        });
        add(cmbParam, java.awt.BorderLayout.NORTH);

        pnlJWT.setLayout(new java.awt.BorderLayout());

        pnlHeader.setLayout(new java.awt.BorderLayout());

        lblHeader.setText("Header");
        pnlHeader.add(lblHeader, java.awt.BorderLayout.PAGE_START);

        txtHeaderJSON.setEditable(false);
        scrollHeaderJSON.setViewportView(txtHeaderJSON);

        pnlHeader.add(scrollHeaderJSON, java.awt.BorderLayout.CENTER);

        pnlJWT.add(pnlHeader, java.awt.BorderLayout.NORTH);

        pnlPayload.setLayout(new java.awt.BorderLayout());

        lblPayload.setText("Payload");
        pnlPayload.add(lblPayload, java.awt.BorderLayout.PAGE_START);

        txtPayloadJSON.setEditable(false);
        scrollPayloadJSON.setViewportView(txtPayloadJSON);

        pnlPayload.add(scrollPayloadJSON, java.awt.BorderLayout.CENTER);

        pnlJWT.add(pnlPayload, java.awt.BorderLayout.CENTER);

        Signature.setPreferredSize(new java.awt.Dimension(108, 60));
        Signature.setLayout(new java.awt.BorderLayout());

        lblSignature.setText("Signature");
        Signature.add(lblSignature, java.awt.BorderLayout.PAGE_START);

        scrollSignatureJSON.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        txtSignatureSign.setEditable(false);
        scrollSignatureJSON.setViewportView(txtSignatureSign);

        Signature.add(scrollSignatureJSON, java.awt.BorderLayout.CENTER);

        pnlJWT.add(Signature, java.awt.BorderLayout.SOUTH);

        add(pnlJWT, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void cmbParamItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbParamItemStateChanged
        String key = (String)this.cmbParam.getSelectedItem();
        JWTObject jwt = this.jwtMap.get(key);
        if (jwt != null) {
            this.txtHeaderJSON.setText(jwt.getHeaderJSON(true));
            this.txtPayloadJSON.setText(jwt.getPayloadJSON(true));
            this.txtSignatureSign.setText(jwt.getSignature());
        }
    }//GEN-LAST:event_cmbParamItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Signature;
    private javax.swing.JComboBox<String> cmbParam;
    private javax.swing.JLabel lblHeader;
    private javax.swing.JLabel lblPayload;
    private javax.swing.JLabel lblSignature;
    private javax.swing.JPanel pnlHeader;
    private javax.swing.JPanel pnlJWT;
    private javax.swing.JPanel pnlPayload;
    private javax.swing.JScrollPane scrollHeaderJSON;
    private javax.swing.JScrollPane scrollPayloadJSON;
    private javax.swing.JScrollPane scrollSignatureJSON;
    private javax.swing.JEditorPane txtHeaderJSON;
    private javax.swing.JEditorPane txtPayloadJSON;
    private javax.swing.JEditorPane txtSignatureSign;
    // End of variables declaration//GEN-END:variables
        
    public void setMessageFont(Font font) {
        this.txtHeaderJSON.setFont(font);
        this.txtPayloadJSON.setFont(font);
        this.txtSignatureSign.setFont(font);
    }

    public boolean isExtendVisible() {
        return false;
    }

    @Override
    public IMessageEditorTab createNewInstance(IMessageEditorController controller, boolean editable) {
        this.txtHeaderJSON.setEditable(false);
        this.txtPayloadJSON.setEditable(false);
        this.txtSignatureSign.setEditable(false);
        return this;
    }
    
    @Override
    public String getTabCaption() {
        return "JWT";
    }

    @Override
    public Component getUiComponent() {
        return this;
    }

    @Override
    public boolean isEnabled(byte[] content, boolean isMessageRequest) {
        if (content == null || content.length == 0) {
            return false;
        }
        if (isMessageRequest) {
            EnumSet<UniversalViewProperty.UniversalView> view = BurpExtender.getInstance().getProperty().getEncodingProperty().getMessageView();
            if (!view.contains(UniversalViewProperty.UniversalView.JWT)) {
                return false;
            }        
            IRequestInfo reqInfo = BurpExtender.getHelpers().analyzeRequest(content);
            List<String> headers = reqInfo.getHeaders();
            for (String h : headers) {
                if (JWTObject.containsJWTFormat(h)) {
                    return true;
                }
            }
                        
        }
        return false;
    }

    private final static Pattern HEADER = Pattern.compile("^(\\w+):\\s*(.*)");
    private final static Pattern COOKIE = Pattern.compile("([^\\s=]+)=([^\\s;]+);?");
 
    private final HashMap<String, JWTObject> jwtMap = new HashMap();
     
    public void setJWT(HttpMessage message) {
        this.jwtMap.clear();
        this.cmbParam.removeAllItems();
        String headers[] = message.getHeaders();
        for (String h : headers) {
            if (JWTObject.containsJWTFormat(h)) {
                if (h.startsWith("Cookie:")) {
                    Matcher m = COOKIE.matcher(h);
                    while (m.find()) {
                        try {
                            String cookie = m.group(0);                            
                            String value = m.group(2);                            
                            if (JWTObject.isJWTFormat(value)) {
                                JWTToken jwt = JWTObject.parseJWTToken(value, true);
                                jwtMap.put(cookie, new JWTObject(jwt));                 
                                this.cmbParam.addItem(cookie);
                            }
                        }
                        catch (Exception ex) {
                        }
                    }
                }
                else {
                    Matcher m = HEADER.matcher(h);
                    if (m.matches()) {
                        try {
                            JWTToken jwto = JWTToken.parseJWTToken(m.group(2), false);
                            jwtMap.put(h, new JWTObject(jwto));                                
                            this.cmbParam.addItem(h);
                        }
                        catch (Exception ex) {
                        }
                    }
                }
            }            
        }                
    }
    
    private HttpMessage message = null;

    @Override
    public void setMessage(byte[] content, boolean isMessageRequest) {
        try {
            HttpMessage httpmessage = null;
            if (isMessageRequest) {
                HttpRequest request = HttpRequest.parseHttpRequest(content);
                httpmessage = request;
                this.setJWT(httpmessage);                
            }
            this.message = httpmessage;
        } catch (ParseException ex) {
            Logger.getLogger(JWTViewTab.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Override
    public byte[] getMessage() {
        if (this.message != null) {
            return this.message.getMessageBytes();
        } else {
            return new byte[]{};
        }
    }

    @Override
    public boolean isModified() {
        return false;
    }

    @Override
    public byte[] getSelectedData() {
        return null;
    }

}
