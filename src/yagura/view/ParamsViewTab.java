package yagura.view;

import burp.BurpExtender;
import burp.IMessageEditorController;
import burp.IMessageEditorTab;
import burp.IMessageEditorTabFactory;
import burp.IParameter;
import burp.IRequestInfo;
import extend.model.base.CustomTableModel;
import extend.util.SwingUtil;
import extend.util.Util;
import extend.view.base.HttpMessage;
import extend.view.base.HttpRequest;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.io.UnsupportedEncodingException;
import java.text.ParseException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JList;
import javax.swing.JTable;
import javax.swing.plaf.basic.BasicComboBoxRenderer;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableColumn;
import yagura.external.TransUtil;
import yagura.model.Parameter;
import yagura.model.ParamsViewModel;

/**
 *
 * @author raise.isayan
 */
public class ParamsViewTab extends javax.swing.JPanel implements IMessageEditorTabFactory, IMessageEditorTab {

    /**
     * Creates new form ParamViewTab
     */
    public ParamsViewTab() {
        initComponents();
        customizeComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlLocation = new javax.swing.JPanel();
        lblLocation = new javax.swing.JLabel();
        btnDecode = new javax.swing.JToggleButton();
        scrollParams = new javax.swing.JScrollPane();
        tableParams = new javax.swing.JTable();

        setLayout(new java.awt.BorderLayout());

        pnlLocation.setLayout(new java.awt.BorderLayout());

        lblLocation.setText("http://localhost/");
        pnlLocation.add(lblLocation, java.awt.BorderLayout.LINE_START);

        btnDecode.setText("Decode");
        btnDecode.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                btnDecodeStateChanged(evt);
            }
        });
        pnlLocation.add(btnDecode, java.awt.BorderLayout.EAST);

        add(pnlLocation, java.awt.BorderLayout.NORTH);

        tableParams.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Data", "Type", "Name", "Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableParams.getTableHeader().setReorderingAllowed(false);
        tableParams.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tableParamsKeyTyped(evt);
            }
        });
        scrollParams.setViewportView(tableParams);
        if (tableParams.getColumnModel().getColumnCount() > 0) {
            tableParams.getColumnModel().getColumn(0).setResizable(false);
        }

        add(scrollParams, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private DefaultTableCellRenderer encodingTableRenderer = new DefaultTableCellRenderer() {

        @Override
        public Component getTableCellRendererComponent(JTable table,
                Object value,
                boolean isSelected,
                boolean hasFocus,
                int row,
                int column) {
            Component component = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            return component;
        }
    };
    
    private final BasicComboBoxRenderer encodingComboBoxRenderer = new BasicComboBoxRenderer() {

        @Override
        public Component getListCellRendererComponent(
                JList list,
                Object value,
                int index,
                boolean isSelected,
                boolean cellHasFocus) {
            Component component = super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
            return component;
        }
    };

    
    private void tableParamsKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableParamsKeyTyped
        String ss = CustomTableModel.tableCopy(this.tableParams);
        SwingUtil.systemClipboardCopy(ss);
    }//GEN-LAST:event_tableParamsKeyTyped

    private void btnDecodeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_btnDecodeStateChanged
        this.modelParams.setUrlDeocde(this.btnDecode.isSelected());
        this.tableParams.updateUI();
    }//GEN-LAST:event_btnDecodeStateChanged

    private ParamsViewModel modelParams = null;
    private final QuickSearchTab quickSearchTab = new QuickSearchTab();
    private final JComboBox cmbEncoding = new JComboBox();
    
    private final Action copyAction = new AbstractAction() {
        public void actionPerformed(ActionEvent evt) {
            //選択されている行の列コピーの値を取得
            JTable table = (JTable)evt.getSource();
            CustomTableModel.tableCopy(table);
        } 
    }; 
    
    private void customizeComponents() {
        this.tableParams.getActionMap().put("copytAction", copyAction); 
        this.modelParams = new ParamsViewModel(this.tableParams.getModel());
        this.tableParams.setModel(this.modelParams);
        
        //this.quickSearchTab.setSelectedTextArea(this.txtRaw);
        this.quickSearchTab.getSearchPanel().setVisible(false);
        this.quickSearchTab.getEncodingComboBox().addItemListener(encodingItemStateChanged);
        add(this.quickSearchTab, java.awt.BorderLayout.SOUTH);

        this.cmbEncoding.setMaximumRowCount(10);
        this.cmbEncoding.setRenderer(this.encodingComboBoxRenderer);
        this.cmbEncoding.addItem(""); // nonselect

        this.tableParams.setDefaultRenderer(Object.class, this.encodingTableRenderer);

        TableColumn colorColumn = this.tableParams.getColumnModel().getColumn(1);
        colorColumn.setCellEditor(new DefaultCellEditor(this.cmbEncoding));
        
        // Data        
        this.tableParams.getColumnModel().getColumn(0).setMinWidth(0);
        this.tableParams.getColumnModel().getColumn(0).setPreferredWidth(0);
        this.tableParams.getColumnModel().getColumn(0).setMaxWidth(0);

        // Type
        this.tableParams.getColumnModel().getColumn(0).setMinWidth(20);
        this.tableParams.getColumnModel().getColumn(0).setPreferredWidth(30);
        this.tableParams.getColumnModel().getColumn(0).setMaxWidth(50);

        // Name
        this.tableParams.getColumnModel().getColumn(1).setMinWidth(20);
        this.tableParams.getColumnModel().getColumn(1).setPreferredWidth(80);
        this.tableParams.getColumnModel().getColumn(1).setMaxWidth(300);

        // Value
        this.tableParams.getColumnModel().getColumn(2).setMinWidth(20);
        this.tableParams.getColumnModel().getColumn(2).setPreferredWidth(80);
        this.tableParams.getColumnModel().getColumn(2).setMaxWidth(300);
                        
    }

    private final java.awt.event.ItemListener encodingItemStateChanged = new java.awt.event.ItemListener() {
        @Override
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            String encoding = quickSearchTab.getSelectedEncoding();
            if (encoding != null) {
                modelParams.setEncoding(encoding);
                tableParams.repaint();
            }
        }
    };

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton btnDecode;
    private javax.swing.JLabel lblLocation;
    private javax.swing.JPanel pnlLocation;
    private javax.swing.JScrollPane scrollParams;
    private javax.swing.JTable tableParams;
    // End of variables declaration//GEN-END:variables

    private HttpMessage message = null;
    private IMessageEditorController controller = null;

    @Override
    public IMessageEditorTab createNewInstance(IMessageEditorController controller, boolean editable) {
        this.controller = controller;
        return this;
    }

    @Override
    public String getTabCaption() {
        return "JParams";
    }

    @Override
    public Component getUiComponent() {
        return this;
    }

    @Override
    public boolean isEnabled(byte[] content, boolean isRequest) {
        if (isRequest) {
            IRequestInfo requestInfo = BurpExtender.getHelpers().analyzeRequest(content);
            List<IParameter> params = requestInfo.getParameters();
            int count = 0;
            for (IParameter p : params) {
                if (p.getType() == IParameter.PARAM_URL
                    || p.getType() == IParameter.PARAM_COOKIE
                    || p.getType() == IParameter.PARAM_BODY
                    || p.getType() == IParameter.PARAM_MULTIPART_ATTR) {
                    count++;
                }
            }
            this.btnDecode.setSelected(false);
            this.btnDecode.setEnabled(requestInfo.getContentType() == IRequestInfo.CONTENT_TYPE_URL_ENCODED);
            return count > 0;
        }
        return false;
    }

    private byte[] content = new byte[]{};
    private IRequestInfo reqInfo = null;

    @Override
    public void setMessage(byte[] content, boolean isRequest) {
        try {
            String guessCharset = null;
            HttpMessage httpmessage = null;
            if (isRequest) {
                HttpRequest request = HttpRequest.parseHttpRequest(content);
                httpmessage = request;
//                guessCharset = request.getGuessCharset();
                this.content = content;
                this.reqInfo = BurpExtender.getHelpers().analyzeRequest(this.controller.getHttpService(), content);
                if (this.reqInfo.getContentType() == IRequestInfo.CONTENT_TYPE_URL_ENCODED) {
                    guessCharset = TransUtil.getUniversalGuessCode(Util.getRawByte(TransUtil.decodeUrl(request.getBody(), "8859_1")));
                }
                else {
                    guessCharset = TransUtil.getUniversalGuessCode(request.getBodyBytes());                
                }

                this.setLocation(this.reqInfo);
                this.setParams(this.reqInfo);
            }
            if (guessCharset == null) {
                guessCharset = "ISO-8859-1";
            }             
            this.message = httpmessage;
            this.quickSearchTab.getEncodingComboBox().removeItemListener(encodingItemStateChanged);
            this.quickSearchTab.renewEncodingList(guessCharset, BurpExtender.getInstance().getSelectEncodingList());
            this.encodingItemStateChanged.itemStateChanged(null);
            this.quickSearchTab.getEncodingComboBox().addItemListener(encodingItemStateChanged);
        } catch (ParseException ex) {
            Logger.getLogger(ParamsViewTab.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(ParamsViewTab.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Override
    public byte[] getMessage() {
        if (this.message != null) {
            return this.message.getMessageBytes();
        } else {
            return new byte[]{};
        }
    }

    public void setLocation(IRequestInfo reqInfo) {
        this.lblLocation.setText(String.format("%s %s", reqInfo.getMethod(), reqInfo.getUrl().toString()));
    }
        
    public void setParams(IRequestInfo reqInfo) {
        this.modelParams.removeAll();
        List<IParameter> params = reqInfo.getParameters();
        for (int i = 0; i < params.size(); i++) {
            IParameter p = params.get(i);
            this.modelParams.addRow(new Parameter(p));
        }
    }

    @Override
    public boolean isModified() {
        return false;
    }

    @Override
    public byte[] getSelectedData() {
        return null;
    }

    public void renewEncodingList(String defaultCharset, List<String> encodingLiest) {
        this.cmbEncoding.removeAllItems();
        for (String enc : encodingLiest) {
            this.cmbEncoding.addItem(enc);
        }
        this.cmbEncoding.setSelectedItem(defaultCharset);
    }
    
}
