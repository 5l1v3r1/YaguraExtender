/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package yagura.view;

import extend.view.base.CustomDialog;
import yagura.model.MatchAlertItem;
import extend.view.base.MatchItem;
import extend.view.base.MatchItem.NotifyType;
import java.awt.Component;
import java.util.EnumSet;
import javax.swing.*;

/**
 *
 * @author isayan
 */
public class MatchAlertItemDlg extends CustomDialog {

    /**
     * Creates new form MatchAlertItemDlg
     *
     * @param parent
     * @param modal
     */
    public MatchAlertItemDlg(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        customizeComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlApply = new javax.swing.JPanel();
        btnCancel = new javax.swing.JButton();
        btnOK = new javax.swing.JButton();
        pnlMain = new javax.swing.JPanel();
        cmbAlertType = new javax.swing.JComboBox();
        txtAlertMatch = new javax.swing.JTextField();
        chkRegExp = new javax.swing.JCheckBox();
        cmbAlertColor = new javax.swing.JComboBox();
        chkIgnoreCase = new javax.swing.JCheckBox();
        chkRepeater = new javax.swing.JCheckBox();
        chkScanner = new javax.swing.JCheckBox();
        chkProxy = new javax.swing.JCheckBox();
        chkSpider = new javax.swing.JCheckBox();
        chkIntruder = new javax.swing.JCheckBox();
        chkSequencer = new javax.swing.JCheckBox();
        lblType = new javax.swing.JLabel();
        lblMatch = new javax.swing.JLabel();
        lblTarget = new javax.swing.JLabel();
        chkTray_message = new javax.swing.JCheckBox();
        chkAlerts_tab = new javax.swing.JCheckBox();
        chkItem_highlight = new javax.swing.JCheckBox();
        chk_Comment = new javax.swing.JCheckBox();
        txtComment = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        pnlApply.setPreferredSize(new java.awt.Dimension(550, 50));

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnOK.setText("OK");
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlApplyLayout = new javax.swing.GroupLayout(pnlApply);
        pnlApply.setLayout(pnlApplyLayout);
        pnlApplyLayout.setHorizontalGroup(
            pnlApplyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlApplyLayout.createSequentialGroup()
                .addContainerGap(402, Short.MAX_VALUE)
                .addComponent(btnOK, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlApplyLayout.setVerticalGroup(
            pnlApplyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlApplyLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlApplyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel)
                    .addComponent(btnOK))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(pnlApply, java.awt.BorderLayout.SOUTH);

        cmbAlertType.setToolTipText("");
        cmbAlertType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbAlertTypeActionPerformed(evt);
            }
        });

        chkRegExp.setSelected(true);
        chkRegExp.setText("RegExp");

        cmbAlertColor.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "red", "orange", "yellow", "green", "cyan", "blue", "pink", "magenta", "gray" }));
        cmbAlertColor.setEnabled(false);
        cmbAlertColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbAlertColorActionPerformed(evt);
            }
        });

        chkIgnoreCase.setText("IgnoreCase");

        chkRepeater.setText("repeater");

        chkScanner.setText("scanner");

        chkProxy.setText("proxy");

        chkSpider.setText("spider");

        chkIntruder.setText("intruder");

        chkSequencer.setText("sequencer");

        lblType.setText("Type:");

        lblMatch.setText("Match:");

        lblTarget.setText("Target:");

        chkTray_message.setText("tray message");
        chkTray_message.setEnabled(false);

        chkAlerts_tab.setText("alerts tab");

        chkItem_highlight.setText("item highlight");
        chkItem_highlight.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chkItem_highlightStateChanged(evt);
            }
        });

        chk_Comment.setText("comment");
        chk_Comment.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chk_CommentStateChanged(evt);
            }
        });

        txtComment.setEnabled(false);

        javax.swing.GroupLayout pnlMainLayout = new javax.swing.GroupLayout(pnlMain);
        pnlMain.setLayout(pnlMainLayout);
        pnlMainLayout.setHorizontalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(lblType)
                        .addComponent(lblMatch))
                    .addComponent(lblTarget))
                .addGap(18, 18, 18)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMainLayout.createSequentialGroup()
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chkSpider)
                            .addComponent(chkProxy, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chkIntruder)
                            .addComponent(chkScanner))
                        .addGap(18, 18, 18)
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chkSequencer)
                            .addComponent(chkRepeater)))
                    .addGroup(pnlMainLayout.createSequentialGroup()
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtAlertMatch)
                            .addComponent(cmbAlertType, 0, 243, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chkRegExp)
                            .addComponent(chkIgnoreCase))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMainLayout.createSequentialGroup()
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chk_Comment)
                            .addComponent(chkTray_message)
                            .addComponent(chkAlerts_tab)
                            .addComponent(chkItem_highlight))
                        .addGap(0, 96, Short.MAX_VALUE))
                    .addComponent(txtComment)
                    .addComponent(cmbAlertColor, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnlMainLayout.setVerticalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMainLayout.createSequentialGroup()
                        .addComponent(chkAlerts_tab)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkTray_message)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkItem_highlight)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbAlertColor, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(chk_Comment))
                    .addGroup(pnlMainLayout.createSequentialGroup()
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlMainLayout.createSequentialGroup()
                                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cmbAlertType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(pnlMainLayout.createSequentialGroup()
                                        .addComponent(lblType)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(lblMatch)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblTarget))
                            .addGroup(pnlMainLayout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addComponent(txtAlertMatch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(chkProxy)
                                    .addComponent(chkScanner)
                                    .addComponent(chkRepeater))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(chkSpider)
                            .addComponent(chkIntruder)
                            .addComponent(chkSequencer)))
                    .addGroup(pnlMainLayout.createSequentialGroup()
                        .addComponent(chkRegExp)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chkIgnoreCase)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtComment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(pnlMain, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.setModalResult(JOptionPane.CANCEL_OPTION);
        this.closeDialog(null);
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed
        this.setModalResult(JOptionPane.OK_OPTION);
        this.closeDialog(null);
    }//GEN-LAST:event_btnOKActionPerformed

    private void cmbAlertTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbAlertTypeActionPerformed
   }//GEN-LAST:event_cmbAlertTypeActionPerformed

    private void cmbAlertColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbAlertColorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbAlertColorActionPerformed

    private void chkItem_highlightStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_chkItem_highlightStateChanged
        this.cmbAlertColor.setEnabled(this.chkItem_highlight.isSelected());
    }//GEN-LAST:event_chkItem_highlightStateChanged

    private void chk_CommentStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_chk_CommentStateChanged
        this.txtComment.setEnabled(this.chk_Comment.isSelected());
    }//GEN-LAST:event_chk_CommentStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MatchAlertItemDlg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MatchAlertItemDlg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MatchAlertItemDlg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MatchAlertItemDlg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /*
         * Create and display the dialog
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                MatchAlertItemDlg dialog = new MatchAlertItemDlg(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnOK;
    private javax.swing.JCheckBox chkAlerts_tab;
    private javax.swing.JCheckBox chkIgnoreCase;
    private javax.swing.JCheckBox chkIntruder;
    private javax.swing.JCheckBox chkItem_highlight;
    private javax.swing.JCheckBox chkProxy;
    private javax.swing.JCheckBox chkRegExp;
    private javax.swing.JCheckBox chkRepeater;
    private javax.swing.JCheckBox chkScanner;
    private javax.swing.JCheckBox chkSequencer;
    private javax.swing.JCheckBox chkSpider;
    private javax.swing.JCheckBox chkTray_message;
    private javax.swing.JCheckBox chk_Comment;
    private javax.swing.JComboBox cmbAlertColor;
    private javax.swing.JComboBox cmbAlertType;
    private javax.swing.JLabel lblMatch;
    private javax.swing.JLabel lblTarget;
    private javax.swing.JLabel lblType;
    private javax.swing.JPanel pnlApply;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JTextField txtAlertMatch;
    private javax.swing.JTextField txtComment;
    // End of variables declaration//GEN-END:variables

    @SuppressWarnings("unchecked")
    private void customizeComponents() {
        for (String t : MatchAlertItem.getTypes()) {
            this.cmbAlertType.addItem(t);
        }

        this.cmbAlertColor.setModel(
                new DefaultComboBoxModel(
                        new MatchItem.HighlightColor[]{MatchItem.HighlightColor.RED, MatchItem.HighlightColor.ORANGE,
                            MatchItem.HighlightColor.YELLOW, MatchItem.HighlightColor.GREEN, MatchItem.HighlightColor.CYAN,
                            MatchItem.HighlightColor.BLUE, MatchItem.HighlightColor.PINK, MatchItem.HighlightColor.MAGENTA,
                            MatchItem.HighlightColor.GRAY}));

        this.cmbAlertColor.setEnabled(false);

        this.cmbAlertColor.setRenderer(new DefaultListCellRenderer() {

            @Override
            public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                JLabel l = (JLabel) super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                MatchItem.HighlightColor hc = (MatchItem.HighlightColor) value;
                l.setIcon(hc.toIcon());
                l.setIconTextGap(2);
                return l;
            }
        });

        this.txtComment.setEnabled(false);

    }

    /**
     * @return the item
     */
    public MatchAlertItem getItem() {
        MatchAlertItem item = new MatchAlertItem();
        item.setType((String) this.cmbAlertType.getSelectedItem());
        item.setMatch(this.txtAlertMatch.getText());

        item.setRegexp(this.chkRegExp.isSelected());
        item.setIgnoreCase(this.chkIgnoreCase.isSelected());

        //item.setNotifyType((MatchItem.NotifyType) this.cmbAlertNotify.getSelectedItem());
        EnumSet<MatchItem.NotifyType> notifys = EnumSet.noneOf(MatchItem.NotifyType.class);
        if (this.chkAlerts_tab.isSelected()) {
            notifys.add(NotifyType.ALERTS_TAB);
        }
        if (this.chkTray_message.isSelected()) {
            notifys.add(NotifyType.TRAY_MESSAGE);
        }
        if (this.chkItem_highlight.isSelected()) {
            notifys.add(NotifyType.ITEM_HIGHLIGHT);
        }
        if (this.chk_Comment.isSelected()) {
            notifys.add(NotifyType.COMMENT);
        }
        item.setNotifyTypes(notifys);

        EnumSet<MatchItem.TargetTool> tools = EnumSet.noneOf(MatchItem.TargetTool.class);
        if (this.chkProxy.isSelected()) {
            tools.add(MatchItem.TargetTool.PROXY);
        }
        if (this.chkRepeater.isSelected()) {
            tools.add(MatchItem.TargetTool.REPEATER);
        }
        if (this.chkIntruder.isSelected()) {
            tools.add(MatchItem.TargetTool.INTRUDER);
        }
        if (this.chkSpider.isSelected()) {
            tools.add(MatchItem.TargetTool.SPIDER);
        }
        if (this.chkScanner.isSelected()) {
            tools.add(MatchItem.TargetTool.SCANNER);
        }
        if (this.chkSequencer.isSelected()) {
            tools.add(MatchItem.TargetTool.SEQUENCER);
        }
        item.setTargetTools(tools);

        if (item.getNotifyTypes().contains(NotifyType.ITEM_HIGHLIGHT)) {
            item.setHighlightColor((MatchItem.HighlightColor) this.cmbAlertColor.getSelectedItem());
        }
        if (item.getNotifyTypes().contains(NotifyType.COMMENT)) {
            item.setComment(this.txtComment.getText());
        }
        return item;
    }

    /**
     * @param item the item to set
     */
    public void setItem(MatchAlertItem item) {
        this.cmbAlertType.setSelectedItem(item.getType());
        this.txtAlertMatch.setText(item.getMatch());
        this.chkRegExp.setSelected(item.isRegexp());
        this.chkIgnoreCase.setSelected(item.isIgnoreCase());
        //this.cmbAlertNotify.setSelectedItem(alertItem.getNotifyType());
        EnumSet<MatchAlertItem.NotifyType> notifys = item.getNotifyTypes();
        this.chkAlerts_tab.setSelected(notifys.contains(MatchAlertItem.NotifyType.ALERTS_TAB));
        this.chkTray_message.setSelected(notifys.contains(MatchAlertItem.NotifyType.TRAY_MESSAGE));
        this.chkItem_highlight.setSelected(notifys.contains(MatchAlertItem.NotifyType.ITEM_HIGHLIGHT));
        this.chk_Comment.setSelected(notifys.contains(MatchAlertItem.NotifyType.COMMENT));

        EnumSet<MatchAlertItem.TargetTool> tools = item.getTargetTools();
        this.chkProxy.setSelected(tools.contains(MatchAlertItem.TargetTool.PROXY));
        this.chkRepeater.setSelected(tools.contains(MatchAlertItem.TargetTool.REPEATER));
        this.chkIntruder.setSelected(tools.contains(MatchAlertItem.TargetTool.INTRUDER));
        this.chkSpider.setSelected(tools.contains(MatchAlertItem.TargetTool.SPIDER));
        this.chkScanner.setSelected(tools.contains(MatchAlertItem.TargetTool.SCANNER));
        this.chkSequencer.setSelected(tools.contains(MatchAlertItem.TargetTool.SEQUENCER));

        if (item.getNotifyTypes().contains(NotifyType.ITEM_HIGHLIGHT)) {
            this.cmbAlertColor.setSelectedItem(item.getHighlightColor());
        }
        if (item.getNotifyTypes().contains(NotifyType.COMMENT)) {
            this.txtComment.setText(item.getComment());
        }
    }
}
