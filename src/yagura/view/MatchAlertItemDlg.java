package yagura.view;

import burp.BurpExtender;
import burp.BurpExtenderImpl;
import extend.util.SwingUtil;
import extend.view.base.CustomDialog;
import yagura.model.MatchAlertItem;
import extend.view.base.MatchItem;
import java.awt.Component;
import java.awt.event.ComponentEvent;
import java.util.EnumSet;
import javax.swing.*;

/**
 *
 * @author isayan
 */
public class MatchAlertItemDlg extends CustomDialog {

    /**
     * Creates new form MatchAlertItemDlg
     *
     * @param parent
     * @param modal
     */
    public MatchAlertItemDlg(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        customizeComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlApply = new javax.swing.JPanel();
        btnCancel = new javax.swing.JButton();
        btnOK = new javax.swing.JButton();
        pnlMain = new javax.swing.JPanel();
        pnlNotice = new javax.swing.JPanel();
        chkSequencer = new javax.swing.JCheckBox();
        chkRepeater = new javax.swing.JCheckBox();
        chkIntruder = new javax.swing.JCheckBox();
        chkScanner = new javax.swing.JCheckBox();
        chkSpider = new javax.swing.JCheckBox();
        chkProxy = new javax.swing.JCheckBox();
        lblTarget = new javax.swing.JLabel();
        lblMatch = new javax.swing.JLabel();
        lblType = new javax.swing.JLabel();
        cmbAlertType = new javax.swing.JComboBox();
        txtAlertMatch = new javax.swing.JTextField();
        chkIgnoreCase = new javax.swing.JCheckBox();
        chkRegExp = new javax.swing.JCheckBox();
        pnlMatch = new javax.swing.JPanel();
        txtComment = new javax.swing.JTextField();
        chkComment = new javax.swing.JCheckBox();
        cmbAlertColor = new javax.swing.JComboBox();
        chkItem_highlight = new javax.swing.JCheckBox();
        chkTray_message = new javax.swing.JCheckBox();
        chkAlerts_tab = new javax.swing.JCheckBox();
        pnlScannerIssue = new javax.swing.JPanel();
        chkScannerIssue = new javax.swing.JCheckBox();
        cmbSeverity = new javax.swing.JComboBox<>();
        cmbConfidence = new javax.swing.JComboBox<>();
        txtIssueName = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        pnlApply.setPreferredSize(new java.awt.Dimension(550, 50));

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnOK.setText("OK");
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlApplyLayout = new javax.swing.GroupLayout(pnlApply);
        pnlApply.setLayout(pnlApplyLayout);
        pnlApplyLayout.setHorizontalGroup(
            pnlApplyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlApplyLayout.createSequentialGroup()
                .addContainerGap(402, Short.MAX_VALUE)
                .addComponent(btnOK, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlApplyLayout.setVerticalGroup(
            pnlApplyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlApplyLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlApplyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel)
                    .addComponent(btnOK))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        getContentPane().add(pnlApply, java.awt.BorderLayout.SOUTH);

        pnlMain.setLayout(new java.awt.BorderLayout());

        chkSequencer.setText("sequencer");

        chkRepeater.setText("repeater");

        chkIntruder.setText("intruder");

        chkScanner.setText("scanner");

        chkSpider.setText("spider");

        chkProxy.setText("proxy");

        lblTarget.setText("Target:");

        lblMatch.setText("Match:");

        lblType.setText("Type:");

        cmbAlertType.setToolTipText("");
        cmbAlertType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbAlertTypeActionPerformed(evt);
            }
        });

        chkIgnoreCase.setText("IgnoreCase");

        chkRegExp.setSelected(true);
        chkRegExp.setText("RegExp");

        pnlMatch.setBorder(javax.swing.BorderFactory.createTitledBorder("Notice"));

        txtComment.setEnabled(false);

        chkComment.setText("comment");
        chkComment.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chkCommentStateChanged(evt);
            }
        });

        cmbAlertColor.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "red", "orange", "yellow", "green", "cyan", "blue", "pink", "magenta", "gray" }));
        cmbAlertColor.setEnabled(false);
        cmbAlertColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbAlertColorActionPerformed(evt);
            }
        });

        chkItem_highlight.setText("item highlight");
        chkItem_highlight.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chkItem_highlightStateChanged(evt);
            }
        });

        chkTray_message.setText("tray message");
        chkTray_message.setEnabled(false);

        chkAlerts_tab.setText("alerts tab");

        chkScannerIssue.setText("scanner issue");
        chkScannerIssue.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chkScannerIssueStateChanged(evt);
            }
        });

        cmbSeverity.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "HIGH", "MEDIUM", "LOW", "INFORMATION" }));

        cmbConfidence.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "CERTAIN", "FIRM", "TENTATIVE" }));

        javax.swing.GroupLayout pnlScannerIssueLayout = new javax.swing.GroupLayout(pnlScannerIssue);
        pnlScannerIssue.setLayout(pnlScannerIssueLayout);
        pnlScannerIssueLayout.setHorizontalGroup(
            pnlScannerIssueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlScannerIssueLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlScannerIssueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtIssueName)
                    .addGroup(pnlScannerIssueLayout.createSequentialGroup()
                        .addGroup(pnlScannerIssueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chkScannerIssue, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbSeverity, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbConfidence, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 62, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlScannerIssueLayout.setVerticalGroup(
            pnlScannerIssueLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlScannerIssueLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chkScannerIssue)
                .addGap(5, 5, 5)
                .addComponent(txtIssueName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbSeverity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbConfidence, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnlMatchLayout = new javax.swing.GroupLayout(pnlMatch);
        pnlMatch.setLayout(pnlMatchLayout);
        pnlMatchLayout.setHorizontalGroup(
            pnlMatchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMatchLayout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(pnlMatchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlMatchLayout.createSequentialGroup()
                        .addGroup(pnlMatchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chkComment)
                            .addComponent(chkTray_message)
                            .addComponent(chkAlerts_tab)
                            .addComponent(chkItem_highlight))
                        .addGap(0, 176, Short.MAX_VALUE))
                    .addComponent(txtComment)
                    .addComponent(cmbAlertColor, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(pnlScannerIssue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6))
        );
        pnlMatchLayout.setVerticalGroup(
            pnlMatchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMatchLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chkAlerts_tab)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkTray_message)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkItem_highlight)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbAlertColor, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(chkComment)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtComment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(pnlScannerIssue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout pnlNoticeLayout = new javax.swing.GroupLayout(pnlNotice);
        pnlNotice.setLayout(pnlNoticeLayout);
        pnlNoticeLayout.setHorizontalGroup(
            pnlNoticeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlNoticeLayout.createSequentialGroup()
                .addGroup(pnlNoticeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlNoticeLayout.createSequentialGroup()
                        .addGroup(pnlNoticeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlNoticeLayout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(lblType)
                                .addGap(20, 20, 20))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlNoticeLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(lblMatch)
                                .addGap(18, 18, 18)))
                        .addGroup(pnlNoticeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtAlertMatch)
                            .addComponent(cmbAlertType, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlNoticeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chkRegExp)
                            .addComponent(chkIgnoreCase)))
                    .addGroup(pnlNoticeLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblTarget)
                        .addGap(18, 18, 18)
                        .addGroup(pnlNoticeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chkSpider)
                            .addComponent(chkProxy, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(pnlNoticeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chkIntruder)
                            .addComponent(chkScanner))
                        .addGap(18, 18, 18)
                        .addGroup(pnlNoticeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chkSequencer)
                            .addComponent(chkRepeater))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlNoticeLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(pnlMatch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        pnlNoticeLayout.setVerticalGroup(
            pnlNoticeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlNoticeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlNoticeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlNoticeLayout.createSequentialGroup()
                        .addGroup(pnlNoticeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(chkRegExp)
                            .addComponent(cmbAlertType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlNoticeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(chkIgnoreCase)
                            .addComponent(txtAlertMatch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblMatch)))
                    .addComponent(lblType))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlNoticeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTarget)
                    .addGroup(pnlNoticeLayout.createSequentialGroup()
                        .addGroup(pnlNoticeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(chkProxy)
                            .addComponent(chkScanner)
                            .addComponent(chkRepeater))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlNoticeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(chkSpider)
                            .addComponent(chkIntruder)
                            .addComponent(chkSequencer))))
                .addGap(18, 18, 18)
                .addComponent(pnlMatch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlMain.add(pnlNotice, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(pnlMain, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        this.setModalResult(JOptionPane.CANCEL_OPTION);
        this.closeDialog(null);
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed
        this.setModalResult(JOptionPane.OK_OPTION);
        this.closeDialog(null);
    }//GEN-LAST:event_btnOKActionPerformed

    private void chkCommentStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_chkCommentStateChanged
        this.txtComment.setEnabled(this.chkComment.isSelected());
    }//GEN-LAST:event_chkCommentStateChanged

    private void chkItem_highlightStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_chkItem_highlightStateChanged
        this.cmbAlertColor.setEnabled(this.chkItem_highlight.isSelected());
    }//GEN-LAST:event_chkItem_highlightStateChanged

    private void cmbAlertColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbAlertColorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbAlertColorActionPerformed

    private void cmbAlertTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbAlertTypeActionPerformed

    }//GEN-LAST:event_cmbAlertTypeActionPerformed

    private void chkScannerIssueStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_chkScannerIssueStateChanged
        this.txtIssueName.setEnabled(this.chkScannerIssue.isSelected());
        this.cmbSeverity.setEnabled(this.chkScannerIssue.isSelected());
        this.cmbConfidence.setEnabled(this.chkScannerIssue.isSelected());
    }//GEN-LAST:event_chkScannerIssueStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MatchAlertItemDlg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MatchAlertItemDlg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MatchAlertItemDlg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MatchAlertItemDlg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /*
         * Create and display the dialog
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                MatchAlertItemDlg dialog = new MatchAlertItemDlg(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnOK;
    private javax.swing.JCheckBox chkAlerts_tab;
    private javax.swing.JCheckBox chkComment;
    private javax.swing.JCheckBox chkIgnoreCase;
    private javax.swing.JCheckBox chkIntruder;
    private javax.swing.JCheckBox chkItem_highlight;
    private javax.swing.JCheckBox chkProxy;
    private javax.swing.JCheckBox chkRegExp;
    private javax.swing.JCheckBox chkRepeater;
    private javax.swing.JCheckBox chkScanner;
    private javax.swing.JCheckBox chkScannerIssue;
    private javax.swing.JCheckBox chkSequencer;
    private javax.swing.JCheckBox chkSpider;
    private javax.swing.JCheckBox chkTray_message;
    private javax.swing.JComboBox cmbAlertColor;
    private javax.swing.JComboBox cmbAlertType;
    private javax.swing.JComboBox<String> cmbConfidence;
    private javax.swing.JComboBox<String> cmbSeverity;
    private javax.swing.JLabel lblMatch;
    private javax.swing.JLabel lblTarget;
    private javax.swing.JLabel lblType;
    private javax.swing.JPanel pnlApply;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JPanel pnlMatch;
    private javax.swing.JPanel pnlNotice;
    private javax.swing.JPanel pnlScannerIssue;
    private javax.swing.JTextField txtAlertMatch;
    private javax.swing.JTextField txtComment;
    private javax.swing.JTextField txtIssueName;
    // End of variables declaration//GEN-END:variables

    @SuppressWarnings("unchecked")
    private void customizeComponents() {
        for (String t : MatchAlertItem.getTypes()) {
            this.cmbAlertType.addItem(t);
        }

        this.cmbAlertColor.setModel(
                new DefaultComboBoxModel(
                        new MatchItem.HighlightColor[]{MatchItem.HighlightColor.RED, MatchItem.HighlightColor.ORANGE,
                            MatchItem.HighlightColor.YELLOW, MatchItem.HighlightColor.GREEN, MatchItem.HighlightColor.CYAN,
                            MatchItem.HighlightColor.BLUE, MatchItem.HighlightColor.PINK, MatchItem.HighlightColor.MAGENTA,
                            MatchItem.HighlightColor.GRAY}));

        this.cmbAlertColor.setEnabled(false);

        this.cmbAlertColor.setRenderer(new DefaultListCellRenderer() {

            @Override
            public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                JLabel l = (JLabel) super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                MatchItem.HighlightColor hc = (MatchItem.HighlightColor) value;
                l.setIcon(hc.toIcon());
                l.setIconTextGap(2);
                return l;
            }
        });

        this.txtComment.setEnabled(false);

        this.txtIssueName.setEnabled(false);
        this.cmbSeverity.setEnabled(false);
        this.cmbConfidence.setEnabled(false);
        
        // FreeVersion only
        this.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(ComponentEvent e) {
                SwingUtil.setContainerEnable(pnlScannerIssue, BurpExtender.getInstance().getBurpVersion().isProfessional());
            }
        });
        
//        SwingUtil.setContainerEnable(this.pnlScannerIssue, false);
        
    }

    /**
     * @return the item
     */
    public MatchAlertItem getItem() {
        MatchAlertItem item = new MatchAlertItem();
        item.setType((String) this.cmbAlertType.getSelectedItem());
        item.setMatch(this.txtAlertMatch.getText());

        item.setRegexp(this.chkRegExp.isSelected());
        item.setIgnoreCase(this.chkIgnoreCase.isSelected());

        //item.setNotifyType((MatchItem.NotifyType) this.cmbAlertNotify.getSelectedItem());
        EnumSet<MatchItem.NotifyType> notifys = EnumSet.noneOf(MatchItem.NotifyType.class);
        if (this.chkAlerts_tab.isSelected()) {
            notifys.add(MatchItem.NotifyType.ALERTS_TAB);
        }
        if (this.chkTray_message.isSelected()) {
            notifys.add(MatchItem.NotifyType.TRAY_MESSAGE);
        }
        if (this.chkItem_highlight.isSelected()) {
            notifys.add(MatchItem.NotifyType.ITEM_HIGHLIGHT);
        }
        if (this.chkComment.isSelected()) {
            notifys.add(MatchItem.NotifyType.COMMENT);
        }
        if (this.chkScannerIssue.isSelected()) {
            notifys.add(MatchItem.NotifyType.SCANNER_ISSUE);
        }
        item.setNotifyTypes(notifys);

        EnumSet<MatchItem.TargetTool> tools = EnumSet.noneOf(MatchItem.TargetTool.class);
        if (this.chkProxy.isSelected()) {
            tools.add(MatchItem.TargetTool.PROXY);
        }
        if (this.chkRepeater.isSelected()) {
            tools.add(MatchItem.TargetTool.REPEATER);
        }
        if (this.chkIntruder.isSelected()) {
            tools.add(MatchItem.TargetTool.INTRUDER);
        }
        if (this.chkSpider.isSelected()) {
            tools.add(MatchItem.TargetTool.SPIDER);
        }
        if (this.chkScanner.isSelected()) {
            tools.add(MatchItem.TargetTool.SCANNER);
        }
        if (this.chkSequencer.isSelected()) {
            tools.add(MatchItem.TargetTool.SEQUENCER);
        }
        item.setTargetTools(tools);

        if (item.getNotifyTypes().contains(MatchItem.NotifyType.ITEM_HIGHLIGHT)) {
            item.setHighlightColor((MatchItem.HighlightColor) this.cmbAlertColor.getSelectedItem());
        }
        if (item.getNotifyTypes().contains(MatchItem.NotifyType.COMMENT)) {
            item.setComment(this.txtComment.getText());
        }        
        if (item.getNotifyTypes().contains(MatchItem.NotifyType.SCANNER_ISSUE)) {
            item.setIssueName(this.txtIssueName.getText());
            String serverty = (String)this.cmbSeverity.getSelectedItem();
            item.setServerity(BurpExtenderImpl.Severity.valueOf(serverty));
            String confidence = (String)this.cmbConfidence.getSelectedItem();
            item.setConfidence(BurpExtenderImpl.Confidence.valueOf(confidence));
        }
        return item;
    }

    /**
     * @param item the item to set
     */
    public void setItem(MatchAlertItem item) {
        this.cmbAlertType.setSelectedItem(item.getType());
        this.txtAlertMatch.setText(item.getMatch());
        this.chkRegExp.setSelected(item.isRegexp());
        this.chkIgnoreCase.setSelected(item.isIgnoreCase());
        //this.cmbAlertNotify.setSelectedItem(alertItem.getNotifyType());
        EnumSet<MatchAlertItem.NotifyType> notifys = item.getNotifyTypes();
        this.chkAlerts_tab.setSelected(notifys.contains(MatchAlertItem.NotifyType.ALERTS_TAB));
        this.chkTray_message.setSelected(notifys.contains(MatchAlertItem.NotifyType.TRAY_MESSAGE));
        this.chkItem_highlight.setSelected(notifys.contains(MatchAlertItem.NotifyType.ITEM_HIGHLIGHT));
        this.chkComment.setSelected(notifys.contains(MatchAlertItem.NotifyType.COMMENT));
        this.chkScannerIssue.setSelected(notifys.contains(MatchAlertItem.NotifyType.SCANNER_ISSUE));

        EnumSet<MatchAlertItem.TargetTool> tools = item.getTargetTools();
        this.chkProxy.setSelected(tools.contains(MatchAlertItem.TargetTool.PROXY));
        this.chkRepeater.setSelected(tools.contains(MatchAlertItem.TargetTool.REPEATER));
        this.chkIntruder.setSelected(tools.contains(MatchAlertItem.TargetTool.INTRUDER));
        this.chkSpider.setSelected(tools.contains(MatchAlertItem.TargetTool.SPIDER));
        this.chkScanner.setSelected(tools.contains(MatchAlertItem.TargetTool.SCANNER));
        this.chkSequencer.setSelected(tools.contains(MatchAlertItem.TargetTool.SEQUENCER));

        if (item.getNotifyTypes().contains(MatchItem.NotifyType.ITEM_HIGHLIGHT)) {
            this.cmbAlertColor.setSelectedItem(item.getHighlightColor());
        }
//        if (item.getNotifyTypes().contains(MatchItem.NotifyType.COMMENT)) {
            this.txtComment.setText(item.getComment());
//        }
//        if (item.getNotifyTypes().contains(MatchItem.NotifyType.SCANNER_ISSUE)) {
            this.txtIssueName.setText(item.getIssueName());
            this.cmbSeverity.setSelectedItem(item.getServerity().toString());
            this.cmbConfidence.setSelectedItem(item.getConfidence().toString());
//        }

    }
}
